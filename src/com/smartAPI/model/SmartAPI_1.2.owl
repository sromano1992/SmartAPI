<rdf:RDF
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:SmartAPI="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#" > 
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#u1">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasLibrary">
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#search">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#have_common_neighbors">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetDegreeCentr">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#min_dispersion">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#test0048">
    <SmartAPI:hasDescription>300515_0048</SmartAPI:hasDescription>
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasCategory">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilderFactory_newDocumentBuilder">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py99">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#debug"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#IsEdge"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print'ppp'
        return</SmartAPI:hasCode>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
    	#
        #print'ppp'
        print "ciao"
        return</SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print
        return</SmartAPI:hasCode>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
    	#""
        #print'ppp'
        print "ciao"
        return</SmartAPI:hasCode>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print'ppp'
        print "ciao"
        return</SmartAPI:hasCode>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#float">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m14">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#followProject">
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jeditpane">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#rsyntax"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPIModel_createAdmin"/>
    <SmartAPI:hasCode>	public static void main(String[] args) {
		SmartAPIModel m = new SmartAPIModel();
		f = new JFrame();
		fAdmin = new JFrame();
		f.setSize(1300, 900);
		fAdmin.setSize(1300, 900);

		if (m.createAdmin()){
			fAdmin.add(new CreateAdminJPanel());
			fAdmin.setVisible(true);
			fAdmin.setDefaultCloseOperation(f.EXIT_ON_CLOSE);
		}
		else{
			f.add(new Desktop_0(f));
			f.setVisible(true);
			f.setDefaultCloseOperation(f.EXIT_ON_CLOSE);
		}
		//f.setExtendedState(JFrame.MAXIMIZED_BOTH); 
		
		
	}</SmartAPI:hasCode>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasKeyword>jeditor</SmartAPI:hasKeyword>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py9">
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#debug"/>
    <SmartAPI:hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        return</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#IsEdge"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m107">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#max_dispersion">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m2">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#close">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPIModel_createAdmin">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#testOwl">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Component_getParent"/>
    <SmartAPI:hasCode> public void treePathChanged(TreePath t) {
		log.info("updating gui...");
		SwingUtilities.updateComponentTreeUI(this);
		Component c = getParent();
		while (c!=null){
			SwingUtilities.updateComponentTreeUI(this);
			c = c.getParent();
		}
	}</SmartAPI:hasCode>
    <SmartAPI:hasKeyword>ontology</SmartAPI:hasKeyword>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">4</SmartAPI:hasScore>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">1</SmartAPI:hasVoters>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#findall">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasName">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasDescription">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#s.cardamone">
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasStars>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:hasEmail>s.cardamone@gmail.com</SmartAPI:hasEmail>
    <SmartAPI:hasAvatar>res/3.png</SmartAPI:hasAvatar>
    <SmartAPI:hasVoted>0</SmartAPI:hasVoted>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasUsername>s.cardamone</SmartAPI:hasUsername>
    <SmartAPI:hasPassword>123456</SmartAPI:hasPassword>
    <SmartAPI:hasSurname>Cardamone</SmartAPI:hasSurname>
    <SmartAPI:isAdministrator>no</SmartAPI:isAdministrator>
    <SmartAPI:hasName>Stefania</SmartAPI:hasName>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Language">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#owl6">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName"/>
    <SmartAPI:hasKeyword>ontology</SmartAPI:hasKeyword>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <SmartAPI:hasCode>public void setCodePattern_s(ArrayList&lt;CodePattern_Category&gt; cp_s, String rootName, boolean inferred){
		this.cp_s = cp_s;
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootName);
		for (CodePattern_Category tmp:cp_s){
			if(inferred){
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getInferredCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getInferredCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
			else{	//all basic cp
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getBasicCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getBasicCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
		}
		if (tree != null){
			this.remove(tree);
		}
		tree = new JTree(rootNode);
		if( scroll == null){
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		else{
			this.remove(scroll);
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		tree.addMouseListener(new MouseAdapter() {
		      public void mouseClicked(MouseEvent me) {
		    	  TreePath tp = tree.getPathForLocation(me.getX(), me.getY());
		    	    if (tp != null){
		    	    	for(TreePathListener t:treePathListener){
		    	    		t.treePathChanged(tp);
		    	    	}		    	      
		    	    }
		      }
	    });
	} </SmartAPI:hasCode>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetBetweennessCentr">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFreeChart">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ParserMethod">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasAvatar">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyLib">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasEmail">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useStorage">
    <rdfs:subPropertyOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#StorageMethod"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#usenull">
    <rdfs:subPropertyOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Individual_addProperty">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasCode>for actor in root.findall('real_person:actor', ns):
	name = actor.find('real_person:name', ns)
	name.text
	for char in actor.findall('role:character', ns):
	print ' |--&gt;', char.text</SmartAPI:hasCode>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#find"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyt"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#findall"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasCode>for actor in root.findall('real_person:actor', ns):
	name = actor.find('real_person:name', ns)
	name.text
	for char in actor.findall('role:character', ns):
		print ' |--&gt;', char.text</SmartAPI:hasCode>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m9">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasOwner">
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_close">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#libpy">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m13">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setDefaultCloseOperation">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useCalendar">
    <rdfs:subPropertyOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CalendarMethod"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Calendar"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m1">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntFltH">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m106">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Len">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#owl9">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName"/>
    <SmartAPI:hasKeyword>ontology</SmartAPI:hasKeyword>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasCode>public void setCodePattern_s(ArrayList&lt;CodePattern_Category&gt; cp_s, String rootName, boolean inferred){
		this.cp_s = cp_s;
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootName);
		for (CodePattern_Category tmp:cp_s){
			if(inferred){
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getInferredCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getInferredCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
			else{	//all basic cp
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getBasicCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getBasicCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
		}
		if (tree != null){
			this.remove(tree);
		}
		tree = new JTree(rootNode);
		if( scroll == null){
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		else{
			this.remove(scroll);
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		tree.addMouseListener(new MouseAdapter() {
		      public void mouseClicked(MouseEvent me) {
		    	  TreePath tp = tree.getPathForLocation(me.getX(), me.getY());
		    	    if (tp != null){
		    	    	for(TreePathListener t:treePathListener){
		    	    		t.treePathChanged(tp);
		    	    	}		    	      
		    	    }
		      }
	    });
	} </SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasLanguage">
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Language"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#null">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_createStatement">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#LibrarypyLib1">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ciro">
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">3</SmartAPI:hasStars>
    <SmartAPI:hasAvatar>res/6.png</SmartAPI:hasAvatar>
    <SmartAPI:hasPassword>cirociro</SmartAPI:hasPassword>
    <SmartAPI:hasSurname>amati</SmartAPI:hasSurname>
    <SmartAPI:isAdministrator>no</SmartAPI:isAdministrator>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasEmail>ciro@amati.com</SmartAPI:hasEmail>
    <SmartAPI:hasUsername>ciro</SmartAPI:hasUsername>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:hasName>ciro</SmartAPI:hasName>
    <SmartAPI:hasVoted>c2,c1,testOwl,py_1,</SmartAPI:hasVoted>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#str">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#test_0100">
    <SmartAPI:hasDescription>test insert</SmartAPI:hasDescription>
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#cp_99">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setVisible"/>
    <SmartAPI:hasCode>public static void setVisible() {
		JFrame f = new JFrame();
		f.setVisible(true);
		f.add(new Desktop_0(f));
		f.setDefaultCloseOperation(f.EXIT_ON_CLOSE);
	}</SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setDefaultCloseOperation"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasKeyword>key99</SmartAPI:hasKeyword>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_add"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_add">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pycp45">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyLib"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasKeyword>pykey</SmartAPI:hasKeyword>
    <SmartAPI:hasCode>for actor in root.findall('real_person:actor', ns):
	name = actor.find('real_person:name', ns)\n"
	name.text\n"
	for char in actor.findall('role:character', ns):\n"
		print ' |--&gt;', char.text\n";</SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyparser">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pylib"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasKeyword>pykey</SmartAPI:hasKeyword>
    <SmartAPI:hasCode># Questo programma calcola lo spazio, data velocità e tempo.
print "Input a rate and a distance"
rate = input("Rate:")
distance = input("Distance:")
print "Time:",distance/rate# Questo programma calcola lo spazio, data velocità e tempo.
print "Input a rate and a distance"
rate = input("Rate:")
distance = input("Distance:")
print "Time:",distance/rate</SmartAPI:hasCode>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#IsEdge">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#int">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getInt">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#isAdministrator">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m105">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasSurname">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Parser">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pylib">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m4">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#group">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py0000">
    <SmartAPI:hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasVoters">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#int"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dbConn">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_createStatement"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_close"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jdbc"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getString"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getInt"/>
    <SmartAPI:hasCode>public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt("id");
         int age = rs.getInt("age");
         String first = rs.getString("first");
         String last = rs.getString("last");

         //Display values
         System.out.print("ID: " + id);
         System.out.print(", Age: " + age);
         System.out.print(", First: " + first);
         System.out.println(", Last: " + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
}//end main
}//end FirstExample</SmartAPI:hasCode>
    <SmartAPI:hasKeyword>database</SmartAPI:hasKeyword>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_close"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_close"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_next"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_executeQuery"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useGUI">
    <rdfs:subPropertyOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GUIMethod"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#u2">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasScore">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#int"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#simone">
    <SmartAPI:hasAvatar>res/2.png</SmartAPI:hasAvatar>
    <SmartAPI:hasSurname>romano</SmartAPI:hasSurname>
    <SmartAPI:hasPassword>simone</SmartAPI:hasPassword>
    <SmartAPI:hasVoted>c2,c1,</SmartAPI:hasVoted>
    <SmartAPI:hasName>simone</SmartAPI:hasName>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasStars>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:isAdministrator>si</SmartAPI:isAdministrator>
    <SmartAPI:hasUsername>simone</SmartAPI:hasUsername>
    <SmartAPI:hasEmail>simoneromano@gmail.com</SmartAPI:hasEmail>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#File_getAbsolutePath">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m15">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Jena">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Ste_CodePattern">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JDBC">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#asd">
    <SmartAPI:hasDescription>projasd</SmartAPI:hasDescription>
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#commonNeighbors">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#debug">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py00">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap"/>
    <SmartAPI:hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</SmartAPI:hasCode>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#range">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#prova">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:hasSurname>prova</SmartAPI:hasSurname>
    <SmartAPI:hasUsername>prova</SmartAPI:hasUsername>
    <SmartAPI:hasPassword>provap</SmartAPI:hasPassword>
    <SmartAPI:isAdministrator>si</SmartAPI:isAdministrator>
    <SmartAPI:hasName>prova</SmartAPI:hasName>
    <SmartAPI:hasVoted>c1,c2,</SmartAPI:hasVoted>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasEmail>prova@prova.com</SmartAPI:hasEmail>
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasStars>
    <SmartAPI:hasAvatar>res/4.png</SmartAPI:hasAvatar>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyt">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#type">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m104">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#set">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#next">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#p1">
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m3"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m2"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ciro"/>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">2</SmartAPI:hasVoters>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">10</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Parser"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#javaParser">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m3">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#testLib">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#generateXsl">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartApi">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#inductGraph">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasStars">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#int"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py31">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#libpy"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#findall"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#find"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasCode>for actor in root.findall('real_person:actor', ns):
	name = actor.find('real_person:name', ns)
	name.text
	for char in actor.findall('role:character', ns):
		print ' |--&gt;', char.text</SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasKeyword">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasUsername">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#s1">
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#u2"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m2"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m1"/>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasVoters>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#HadoopAnalyzerJR">
    <SmartAPI:hasCategory>Calendar</SmartAPI:hasCategory>
    <SmartAPI:hasDescription>This project will paint all hadoop chart		</SmartAPI:hasDescription>
    <SmartAPI:hasCategory>Parser</SmartAPI:hasCategory>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dddd">
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <SmartAPI:hasDescription>dddnsd</SmartAPI:hasDescription>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#write">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_close">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#xmlParser">
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_close"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Parser"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilder_parse"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_close"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#javaParser"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_close"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilderFactory_newDocumentBuilder"/>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_executeQuery"/>
    <SmartAPI:hasKeyword>xml</SmartAPI:hasKeyword>
    <SmartAPI:useParser rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_createStatement"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasCode>public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
	

   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");


       //xml parser
	//get the factory
	DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

	try {

		//Using factory get an instance of document builder
		DocumentBuilder db = dbf.newDocumentBuilder();

		//parse using builder to get DOM representation of the XML file
		dom = db.parse("employees.xml");


	}catch(ParserConfigurationException pce) {
		pce.printStackTrace();
	}catch(SAXException se) {
		se.printStackTrace();
	}catch(IOException ioe) {
		ioe.printStackTrace();
}
}//end main
}//end FirstExample</SmartAPI:hasCode>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#storage3">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName"/>
    <SmartAPI:hasCode>public void setCodePattern_s(ArrayList&lt;CodePattern_Category&gt; cp_s, String rootName, boolean inferred){
		this.cp_s = cp_s;
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootName);
		for (CodePattern_Category tmp:cp_s){
			if(inferred){
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getInferredCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getInferredCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
			else{	//all basic cp
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getBasicCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getBasicCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
		}
		if (tree != null){
			this.remove(tree);
		}
		tree = new JTree(rootNode);
		if( scroll == null){
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		else{
			this.remove(scroll);
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		tree.addMouseListener(new MouseAdapter() {
		      public void mouseClicked(MouseEvent me) {
		    	  TreePath tp = tree.getPathForLocation(me.getX(), me.getY());
		    	    if (tp != null){
		    	    	for(TreePathListener t:treePathListener){
		    	    		t.treePathChanged(tp);
		    	    	}		    	      
		    	    }
		      }
	    });
	}</SmartAPI:hasCode>
    <SmartAPI:hasKeyword>db</SmartAPI:hasKeyword>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useParser">
    <rdfs:subPropertyOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod"/>
    <rdfs:range rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ParserMethod"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Parser"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#ObjectProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#smartapi3">
    <SmartAPI:hasDescription>here description</SmartAPI:hasDescription>
    <SmartAPI:hasCategory>Calendar</SmartAPI:hasCategory>
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_next">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m10">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m6">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DelAll">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m103">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasVoted">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersionCentrality">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilder_parse">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#abcd">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:hasName>abcd</SmartAPI:hasName>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasUsername>abcd</SmartAPI:hasUsername>
    <SmartAPI:hasPassword>abcdef</SmartAPI:hasPassword>
    <SmartAPI:hasSurname>abcd</SmartAPI:hasSurname>
    <SmartAPI:hasEmail>abcd@aabcd.com</SmartAPI:hasEmail>
    <SmartAPI:isAdministrator>no</SmartAPI:isAdministrator>
    <SmartAPI:hasAvatar>res/4.png</SmartAPI:hasAvatar>
    <SmartAPI:hasVoted>0</SmartAPI:hasVoted>
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasStars>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_close">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntPrFltH">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#testCP_111">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasCode>public OntModel getOntModel(){
		if(base != null)
			return base;
		base = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);		
		String modelPath = this.getClass().getResource(OWL_FILE_PATH).getFile();
		File file;
		try {
			file = new File(new java.net.URI(modelPath).getPath());
			InputStream in = FileManager.get().open(file.getAbsolutePath());
			if (in == null) {
				throw new IllegalArgumentException("File: " + file.getAbsolutePath() + " not found");
			}
			base.read(in, null);		
			log.info("Model created...");
		} catch (URISyntaxException e) {
			log.severe("Exception creating file: '" + modelPath + "'");
			e.printStackTrace();
		}
		return base;	
	}</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#File_getAbsolutePath"/>
    <SmartAPI:hasKeyword>test_111</SmartAPI:hasKeyword>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#testLib"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GUIMethod">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#c1">
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m105"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m1"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#u1"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m108"/>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">5</SmartAPI:hasVoters>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m104"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JDBC"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m103"/>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">36</SmartAPI:hasScore>
    <SmartAPI:hasCode rdf:datatype="http://www.w3.org/2001/XMLSchema#string">try {
 
    ResultSet rs;
    PreparedStatement ps = conn.prepareStatement( 
             "SELECT i.*, j.* FROM Omega i, Zappa j WHERE i = ? AND j = ?" );
    // Nel prepared statement ps, i punti di domanda denotano le variabili in input,
    // che possono essere passate attraverso una lista di parametri, per esempio.
 
    // Il codice seguente sostituisce i punti di domanda con stringhe o interi.
    // Il primo parametro indica la posizione in cui il valore va inserito, 
    // il secondo parametro è il valore da inserire.
    ps.setString(1, "Poor Yorick");
    ps.setInt(2, 8008);
 
    // Il ResultSet rs riceve la risposta del database.
    rs = ps.executeQuery();
    while ( rs.next() ) {
       int numeroColonne = rs.getMetaData().getColumnCount();
        for ( int i = 1 ; i &lt;= numeroColonne ; i++ ) {
           System.out.println( "COLONNA " + i + " = " + rs.getObject(i) );
     }
 
    rs.close();
    ps.close();
 
 } catch (SQLException e) {
    // gestione delle eccezioni
 }</SmartAPI:hasCode>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m3"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m107"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m100"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Calendar"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m2"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m109"/>
    <SmartAPI:hasKeyword>calendario</SmartAPI:hasKeyword>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m5"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m102"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m4"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m106"/>
    <SmartAPI:useCalendar rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m101"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#rsyntax">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyparser1">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pylib"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasCode>code = sys.argv[1]
#tree = ast.parse("db = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\")\n"
#                 "cursor = db.cursor()")
tree = ast.parse(code)

for node in ast.walk(tree):
    if isinstance(node, ast.Call):
        info = ast.dump(ast.parse(node.func))
        #print info
        attrFirstIndex = int(info.index("attr='") + 6)
        attrSecondIndex = 0
        for i,c in enumerate(info):
            if c=='\'': 
                if i&gt;attrFirstIndex:
                    attrSecondIndex = i                    
        print info[int(attrFirstIndex) :int(attrSecondIndex)]
</SmartAPI:hasCode>
    <SmartAPI:hasKeyword>pykey</SmartAPI:hasKeyword>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m102">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jdbc">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m5">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setVisible">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetId">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Component_getParent">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#find">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#java">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#owl5">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName"/>
    <SmartAPI:hasCode>public void setCodePattern_s(ArrayList&lt;CodePattern_Category&gt; cp_s, String rootName, boolean inferred){
		this.cp_s = cp_s;
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootName);
		for (CodePattern_Category tmp:cp_s){
			if(inferred){
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getInferredCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getInferredCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
			else{	//all basic cp
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getBasicCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getBasicCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
		}
		if (tree != null){
			this.remove(tree);
		}
		tree = new JTree(rootNode);
		if( scroll == null){
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		else{
			this.remove(scroll);
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		tree.addMouseListener(new MouseAdapter() {
		      public void mouseClicked(MouseEvent me) {
		    	  TreePath tp = tree.getPathForLocation(me.getX(), me.getY());
		    	    if (tp != null){
		    	    	for(TreePathListener t:treePathListener){
		    	    		t.treePathChanged(tp);
		    	    	}		    	      
		    	    }
		      }
	    });
	} </SmartAPI:hasCode>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasKeyword>ontology</SmartAPI:hasKeyword>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#c4">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasKeyword>keyword1</SmartAPI:hasKeyword>
    <SmartAPI:hasCode></SmartAPI:hasCode>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyLib12">
    <SmartAPI:hasLanguage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Calendar">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User">
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#open">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasPassword">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#intersection">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m8">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m101">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m12">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#s4">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#jena"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasCode rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#"/>
    <SmartAPI:hasKeyword>k1</SmartAPI:hasKeyword>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#StorageMethod">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py_1">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntPrFltH"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#type"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#int"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#avg_dispersion"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#PrintInfo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#norm"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#write"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#debug"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#search"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#range"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#close"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#commonNeighbors"/>
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntFltH"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#inductGraph"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#max_dispersion"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#next"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#IsEdge"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#have_common_neighbors"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetDegreeCentr"/>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">1</SmartAPI:hasVoters>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersionCentrality"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#group"/>
    <SmartAPI:hasCode># da ottimizzare

import snap
import re
from snap import *
import logging
from fileinput import filename

def fromGexfToEdge(inputFileName, outputFileName):
    inputfile = open(inputFileName)
    outputfile = open(outputFileName, 'w')
    
    nodi = {}
    count = 0
    for i in range(1): inputfile.next()  # skip first four lines
    for line in inputfile:
        try:
            found = re.search('&lt;node id="(.+?)" ', line).group(1)
            nodi[found] = count
            count += 1
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = ''  # apply your error handling
        try:
            found1 = re.search('source="(.+?)" ', line).group(1)
            found2 = re.search('target="(.+?)" ', line).group(1)
            string = str(nodi[found1]) + " " + str(nodi[found2]) + "\n"
            outputfile.write(string)
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = ''  # apply your error handling
    outputfile1 = open(outputFileName+"_correspondence.txt", 'w')
    outputfile1.write(str(nodi))
    
    inputfile.close()
    outputfile.close()
    
def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1
    
def commonNeighbors(G1, u, h):
    a = set()
    b = set()
    for N in G1.GetNI(u).GetOutEdges():
        a.add(N)
    for N in G1.GetNI(h).GetOutEdges():
        b.add(N)
    intersect = a.intersection(b)
    nodes = snap.TIntV()
    for n in intersect:
        nodes.Add(n)
    return nodes


def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print "non c'e l'arco tra u e h"
        return

    nodes = commonNeighbors(G1, u, h)

    #print "doing something"

    sum = 0
    for i in nodes:
        for j in nodes:

            if i &lt; j:
                logging.debug(str(i) + " " + str(j) + " - " + str(G1.IsEdge(i, j)))
                if (not (G1.IsEdge(i, j))):
                    logging.debug("non c'e l'arco")
                    nodes1 = snap.TIntV()
                    for N in G1.GetNI(i).GetOutEdges():
                        nodes1.Add(N)

                    #rimuovi il nodo u e h dalla lista dei nodi
                    nodes1.DelAll(u)
                    nodes1.DelAll(h)
                    Sub1 = snap.GetSubGraph(G1, nodes1)

                    nodes2 = snap.TIntV()
                    for N in G1.GetNI(j).GetOutEdges():
                        nodes2.Add(N)

                    #rimuovi il nodo u e h dalla lista dei nodi
                    nodes2.DelAll(u)
                    nodes2.DelAll(h)
                    #Sub2 = snap.GetSubGraph(G1, nodes2)

                    flag = 0
                    for k in nodes1:
                        for l in nodes2:
                            if (k == l):
                                flag = 1

                    if (flag == 0):
                        #logging.debug(str(k) +" " + str(l) + "......")
                        sum = sum + 1
                        logging.debug("sum: " + str(sum))

    #print "la dispersione tra il numero u e il nodo h e': ", sum
    return float(sum)


def embeddedness(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print "non c'e l'arco tra u e h"
        return

    nodes = commonNeighbors(G1, u, h)

    #print "la embeddedness e'", nodes.Len()
    return nodes.Len()


def norm(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        return  #dispersion between u and h cannot be calculated

    dispers = dispersion(G1, u, h)
    emb = embeddedness(G1, u, h)
    
    if emb == 0:
        return float(0)
    normaliz = float(dispers) / float(emb)
    #print "la norma e' %.5f" % normaliz
    return normaliz


def performance(G1, a=0.61, b=0, c=5, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print "non c'e l'arco tra u e h"
        return

    dispers = dispersion(G1, u, h)
    emb = embeddedness(G1, u, h)
    perf = ((dispers + b) ** a) / float((emb + c))
    print "la performance e'", perf
    return perf

    
#use new value of Xv in next iterations
def recDisp(G1, u, num_iterations):
    indGraph = inductGraph(G1, u)
    dispersionFromOthers = {}   #contains node=Xnode
    dispersionFromOthers_tmp = {}
    
    #Xi = 1 for all node i near u
    for node in indGraph.Nodes():
        dispersionFromOthers[node.GetId()] = 1   
        dispersionFromOthers_tmp[node.GetId()] = 1
        
    #start iterations
    iteration = 0
    while iteration &lt; num_iterations:
        print "Iteration: ", iteration + 1
        for node in indGraph.Nodes():
            Cuv = commonNeighbors(G1, u, node.GetId())
            #calculate first term of sum
            first_term = 0
            for xi in Cuv:
                first_term = first_term + dispersionFromOthers[xi]**2
            #calculate second term of sum
            second_term = 0
            for i in Cuv:
                for j in Cuv:
                    if i&lt;j:
                        if (not G1.IsEdge(i,j) and have_common_neighbors(G1, i, j, u, node.GetId()) == 0):
                            second_term = second_term + (1*dispersionFromOthers[i]*dispersionFromOthers[j])
            #calculate value Xi
            if (embeddedness(G1, u, node.GetId())): #embeddendness not 0
                dispersionFromOthers_tmp[node.GetId()] = (first_term + (2 * second_term))/embeddedness(G1, u, node.GetId())
                print node.GetId(), " ", dispersionFromOthers_tmp[node.GetId()]
        for node in indGraph.Nodes():
            dispersionFromOthers[node.GetId()] = dispersionFromOthers_tmp[node.GetId()] 
        iteration = iteration + 1
        
#use new value of Xv immediatly
def recDisp_immediate(G1, u, num_iterations):
    indGraph = inductGraph(G1, u)
    dispersionFromOthers = {}   #contains node=Xnode
    dispersionFromOthers_tmp = {}
    
    #Xi = 1 for all node i near u
    for node in indGraph.Nodes():
        dispersionFromOthers[node.GetId()] = 1   
        
    #start iterations
    iteration = 0
    while iteration &lt; num_iterations:
        print "Iteration: ", iteration + 1
        for node in indGraph.Nodes():
            Cuv = commonNeighbors(G1, u, node.GetId())
            #calculate first term of sum
            first_term = 0
            for xi in Cuv:
                first_term = first_term + dispersionFromOthers[xi]**2
            #calculate second term of sum
            second_term = 0
            for i in Cuv:
                for j in Cuv:
                    if i&lt;j:
                        if (not G1.IsEdge(i,j) and have_common_neighbors(G1, i, j, u, node.GetId()) == 0):
                            second_term = second_term + (1*dispersionFromOthers[i]*dispersionFromOthers[j])
            #calculate value Xi
            if (embeddedness(G1, u, node.GetId())): #embeddendness not 0
                dispersionFromOthers[node.GetId()] = (first_term + (2 * second_term))/embeddedness(G1, u, node.GetId())
                print node.GetId(), " ", dispersionFromOthers[node.GetId()]
        iteration = iteration + 1

#i and j haven't common neighbors except u and h in graph G1 
def have_common_neighbors(G1, i, j, u, h):
    nodes1 = snap.TIntV()
    for N in G1.GetNI(i).GetOutEdges():
        nodes1.Add(N)

    #rimuovi il nodo u e h dalla lista dei nodi
    nodes1.DelAll(u)
    nodes1.DelAll(h)
    Sub1 = snap.GetSubGraph(G1, nodes1)

    nodes2 = snap.TIntV()
    for N in G1.GetNI(j).GetOutEdges():
        nodes2.Add(N)

    #rimuovi il nodo u e h dalla lista dei nodi
    nodes2.DelAll(u)
    nodes2.DelAll(h)
    #Sub2 = snap.GetSubGraph(G1, nodes2)

    flag = 0
    for k in nodes1:
        for l in nodes2:
            if (k == l):
                flag = 1

    if (flag == 0):
        return 0
    return 1
                        
def printInfo(G):
    snap.PrintInfo(G, "Python type PUNGraph")

def useOfDictionary():
    streetno = { "1" : "Sachin Tendulkar",
            2 : "Dravid",
            "3" : "Sehwag",
            4 : "Laxman",
            5 : "Kohli" }
    streetno[1] = 3
    
    for keys,values in streetno.items():
        print(keys)
        print(values)
    print streetno
    print streetno[1]
    
def printNodesInformations(G1, node):
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    
    #dispersion from others nodes
    print "Report for node ", node
    print "1)DISPERSION"
    for n in G1.Nodes():
        if n.GetId() != node:
            print "dispersion of ", node, " from ", n.GetId(), " = ", norm(G1, node, n.GetId())
    print "2)DEGREE CENTRALITY"
    print GetDegreeCentr(G1, node)
    print "3)CLOSENESS CENTRALITY"
    print GetClosenessCentr(G1,node)
    print "4)BETWEENNESS CENTR"
    print Nodes[node]

#print xml info for only one node
def printNodeInformations_XML(G1, node, fileName):
    out_file = open(fileName,"w")
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    
    out_file.write("&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n")
    #dispersion from ,others nodes
    out_file.write("&lt;node&gt;"+str(node)+"&lt;/node&gt;\n")
    out_file.write("&lt;degree_centrality&gt;"+str(GetDegreeCentr(G1, node))+"&lt;/degree_centrality&gt;\n")
    out_file.write("&lt;closeness_centrality&gt;"+str(GetClosenessCentr(G1,node))+"&lt;/closeness_centrality&gt;\n")
    out_file.write("&lt;betweenness_centrality&gt;"+str(Nodes[node])+"&lt;/betweenness_centrality&gt;\n")
    for n in G1.Nodes():
        if n.GetId() != node:
            out_file.write("&lt;dispersion from='"+str(n.GetId())+"'&gt;"+str(norm(G1, node, n.GetId()))+"&lt;/dispersion&gt;\n")
    out_file.close()

#print xml info for first numNode nodes in graph
#if numNode == "all" print info for all nodes
def printNodesInformations_XML(G1, fileName, numNode):
    print "start node information creating..."
    out_file = open(fileName,"w")
    xsl_file_name = fileName+".xsl"
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    #kMax = getKmax(G1)
    
    out_file.write("&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n")
    out_file.write("&lt;?xml-stylesheet type=\"text/xsl\" href=\"graphic_xsl.xsl\"?&gt;\n")
    out_file.write("&lt;nodes&gt;\n")
    i=0
    #all info for each nodes
    for node in G1.Nodes():
        if numNode != "all":
            if i &gt;= numNode:
                out_file.write("&lt;/nodes&gt;\n")
                return
            i = i+1
        print "info for node: " + str(node.GetId())
        out_file.write("\t&lt;node id='"+str(node.GetId())+"'&gt;\n")
        out_file.write("\t\t&lt;degree_centrality&gt;"+str(GetDegreeCentr(G1, node.GetId()))+"&lt;/degree_centrality&gt;\n")
        out_file.write("\t\t&lt;closeness_centrality&gt;"+str(GetClosenessCentr(G1,node.GetId()))+"&lt;/closeness_centrality&gt;\n")
        out_file.write("\t\t&lt;betweenness_centrality&gt;"+str(Nodes[node.GetId()])+"&lt;/betweenness_centrality&gt;\n")
        #for n in G1.Nodes():
        #    if n.GetId() != node.getId():
        #        dispersion = norm(G1, node.GetId(), n.GetId())
        #        if dispersion != None:
        #           out_file.write("\t\t&lt;dispersion from='"+str(n.GetId())+"'&gt;"+str(norm(G1, node.GetId(), n.GetId()))+"&lt;/dispersion&gt;\n")
        out_file.write("\t\t&lt;dispersion_centrality&gt;"+str(dispersionCentrality(G1, node.GetId()))+"&lt;/dispersion_centrality&gt;\n")
        #out_file.write("\t\t&lt;normalized_dispersion_centrality&gt;"+str(normalizedDispersionCentrality(G1, node.GetId(),kMax))+"&lt;/normalized_dispersion_centrality&gt;\n")
        out_file.write("\t\t&lt;dispersion_average&gt;"+str(avg_dispersion(G1, node.GetId()))+"&lt;/dispersion_average&gt;\n") 
        out_file.write("\t\t&lt;dispersion_max&gt;"+str(max_dispersion(G1, node.GetId()))+"&lt;/dispersion_max&gt;\n") 
        out_file.write("\t\t&lt;dispersion_min&gt;"+str(min_dispersion(G1, node.GetId()))+"&lt;/dispersion_min&gt;\n") 
        out_file.write("\t&lt;/node&gt;\n")
    out_file.write("&lt;/nodes&gt;\n")
    out_file.close()
    
    #generation of xsl to show result in browser
    generateXsl(xsl_file_name)

#for an input node calculate its dispersion from others node
#in G1 and normalize it between 0 and 1;
#then calculate mediumn between all dispersion
#kMax is max
def dispersionCentrality(G1, u):
    number = 0
    dispersionCentrality = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                dispersionCentrality = dispersionCentrality + (float(disp))#/float(divisor))
    
    return dispersionCentrality
    
#reutrn number of biggest neighbors in graph
#checking between each pairs of nodes
def getKmax(G1):
    kMax = 0
    for node1 in G1.Nodes():
        for node2 in G1.Nodes():
            if node2.GetId() &gt; node1.GetId():
                newK = commonNeighbors(G1, node1.GetId(), node2.GetId()).Len()
                if newK &gt; kMax:
                    kMax = newK
    return kMax


#for an input node calculate its dispersion from others node
#in G1 and normalize it between 0 and 1;
#then calculate mediumn between all dispersion
#kMax is max
def normalizedDispersionCentrality(G1, u, kMax):
    number = 0
    dispersionCentrality = 0
    divisor = 2**int(kMax)   #normalization coefficient
    
    sumOfDispersion = 0.0
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = norm(G1, u, n.GetId())
            if disp != None:
                sumOfDispersion = sumOfDispersion + (disp/float(divisor))
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                dispersionCentrality = dispersionCentrality + (float(disp))/float(divisor)
    
    return dispersionCentrality


#return the average of all u's dispersions
#from others node in G1
def avg_dispersion(G1, u):
    number = 0
    sum_dispersion = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                number = number + 1
                sum_dispersion = sum_dispersion + disp
    
    if number != 0:
        return sum_dispersion / number
    return sum_dispersion

def min_dispersion(G1, u):
    min = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            isMin = dispersion(G1,u,n.GetId())
            if (isMin != None and isMin&lt;min):
                min = isMin

    return min

def max_dispersion(G1, u):
    max = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            isMax = dispersion(G1,u,n.GetId())
            if (isMax != None and isMax&gt;max):
                max = isMax

    return max

def generateXsl(xslFileName):
    print "Xsl Not implemented yet"
    
#from xml generated to csv for gephi
def printNodesInformations_CSV(G1, fileName, numNode):
    print "start node information creating..."
    out_file = open(fileName,"w")
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    print "calculating BetweennessCentr..."
    snap.GetBetweennessCentr(G1, Nodes, Edges, 0.99)
    #kMax = getKmax(G1)
    
    out_file.write("id,closeness_centrality,betweenness_centrality,dispersion_centrality\n")
    i=0
    #all info for each nodes
    for node in G1.Nodes():
        if numNode != "all":
            if i &gt;= numNode:
                return
            i = i+1
        print "info for node: " + str(node.GetId())
        out_file.write(str(node.GetId())+",")
        #out_file.write(str(GetDegreeCentr(G1, node.GetId()))+",")
        out_file.write(str(GetClosenessCentr(G1,node.GetId()))+",")
        out_file.write(str(Nodes[node.GetId()])+",")    #betweenness_centrality
        #print "betweenness ok...";
        out_file.write(str(dispersionCentrality(G1, node.GetId()))+"\n")
        #out_file.write(str(avg_dispersion(G1, node.GetId()))+",") 
        #out_file.write(str(max_dispersion(G1, node.GetId()))+",") 
        #out_file.write(str(min_dispersion(G1, node.GetId()))+"\n") 
    out_file.close()    
    #generation of xsl to show result in browser
    #generateXsl(xsl_file_name)
    
def compare_betweenness_centrality(G1, fileName):
    print "start betweenness comparison creating..."
    out_file = open(fileName,"w")
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    out_file.write("id,betweenness_centrality,approx\n")
    approx = float(1)
    for approx in range(1,10):
        snap.GetBetweennessCentr(G1, Nodes, Edges, float(approx)/10)
        print "creating info for approx = " + str(float(approx)/10)
        for node in G1.Nodes():
            out_file.write(str(node.GetId())+",")
            out_file.write(str(Nodes[node.GetId()])+",")
            out_file.write(str(float(approx)/10)+"\n")
        approx = approx + 0.1
    out_file.close()

def printAllNodes(G1):
     for node in G1.Nodes():
        print "info for node: " + str(node.GetId())

</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetId"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#open"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Nodes"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#generateXsl"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Len"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetClosenessCentr"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersion"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#set"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#str"/>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">7</SmartAPI:hasScore>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#items"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DelAll"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetBetweennessCentr"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#embeddedness"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#intersection"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#float"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#min_dispersion"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#add"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#norm">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#embeddedness">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m109">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getString">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasCode">
    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
    <rdfs:domain rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AnnotationProperty"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#add">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#avg_dispersion">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#nextProject">
    <SmartAPI:hasCategory>Parser</SmartAPI:hasCategory>
    <SmartAPI:hasCategory>Storage</SmartAPI:hasCategory>
    <SmartAPI:hasCategory>Calendar</SmartAPI:hasCategory>
    <SmartAPI:hasDescription>this is nextproj</SmartAPI:hasDescription>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#s2">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m106"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m105"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ciro"/>
    <SmartAPI:hasVoters rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasVoters>
    <SmartAPI:hasScore rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo">
    <SmartAPI:hasSurname>leo</SmartAPI:hasSurname>
    <SmartAPI:hasPassword>amedeo</SmartAPI:hasPassword>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User"/>
    <SmartAPI:hasName>amedeo</SmartAPI:hasName>
    <SmartAPI:followProject rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#asd"/>
    <SmartAPI:hasStars rdf:datatype="http://www.w3.org/2001/XMLSchema#int">0</SmartAPI:hasStars>
    <SmartAPI:followProject rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#HadoopAnalyzerJR"/>
    <SmartAPI:hasVoted>p1,c1,</SmartAPI:hasVoted>
    <SmartAPI:isAdministrator>si</SmartAPI:isAdministrator>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:followProject rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#nextProject"/>
    <SmartAPI:hasEmail>amedeo.leo@gmail.com</SmartAPI:hasEmail>
    <SmartAPI:hasAvatar></SmartAPI:hasAvatar>
    <SmartAPI:hasUsername>amedeo</SmartAPI:hasUsername>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Language"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Nodes">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pySnap">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV"/>
    <SmartAPI:hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m7">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m100">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pycp4">
    <SmartAPI:hasLibrary rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pyLib"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <SmartAPI:hasCode>for line in inputfile:
        try:
            found = re.search('&lt;node id="(.+?)" ', line).group(1)
            nodi[found] = count
            count += 1
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = ''  # apply your error handling
        try:
            found1 = re.search('source="(.+?)" ', line).group(1)
            found2 = re.search('target="(.+?)" ', line).group(1)
            string = str(nodi[found1]) + " " + str(nodi[found2]) + "\n"
            outputfile.write(string)
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = ''  # apply your error handling
    outputfile1 = open(outputFileName+"_correspondence.txt", 'w')
    outputfile1.write(str(nodi))</SmartAPI:hasCode>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <SmartAPI:hasKeyword>pykey</SmartAPI:hasKeyword>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m11">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CalendarMethod">
    <rdfs:subClassOf rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#Class"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m108">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#PrintInfo">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetClosenessCentr">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_executeQuery">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersion">
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI"/>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage"/>
    <SmartAPI:hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</SmartAPI:hasCode>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges"/>
    <SmartAPI:hasVoters>0</SmartAPI:hasVoters>
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <SmartAPI:hasOwner rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo"/>
    <SmartAPI:hasScore>0</SmartAPI:hasScore>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
    <SmartAPI:useStorage rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV"/>
  </rdf:Description>
  <rdf:Description rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#items">
    <rdf:type rdf:resource="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#NamedIndividual"/>
  </rdf:Description>
</rdf:RDF>
