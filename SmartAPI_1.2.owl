<?xml version="1.0"?>


<!DOCTYPE rdf:RDF [
    <!ENTITY owl "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY SmartAPI "http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#" >
]>


<rdf:RDF xmlns="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#"
     xml:base="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI"
     xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
     xmlns:owl="http://www.w3.org/2002/07/owl#"
     xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
     xmlns:SmartAPI="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#"
     xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#">
    <owl:Ontology rdf:about="http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasCode -->

    <owl:AnnotationProperty rdf:about="&SmartAPI;hasCode">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
    </owl:AnnotationProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Datatypes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m1 -->

    <rdfs:Datatype rdf:about="&SmartAPI;m1"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m2 -->

    <rdfs:Datatype rdf:about="&SmartAPI;m2"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#m3 -->

    <rdfs:Datatype rdf:about="&SmartAPI;m3"/>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#followProject -->

    <owl:ObjectProperty rdf:about="&SmartAPI;followProject">
        <rdfs:range rdf:resource="&SmartAPI;Project"/>
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasLanguage -->

    <owl:ObjectProperty rdf:about="&SmartAPI;hasLanguage">
        <rdfs:range rdf:resource="&SmartAPI;Language"/>
        <rdfs:domain rdf:resource="&SmartAPI;Library"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasLibrary -->

    <owl:ObjectProperty rdf:about="&SmartAPI;hasLibrary">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
        <rdfs:range rdf:resource="&SmartAPI;Library"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasOwner -->

    <owl:ObjectProperty rdf:about="&SmartAPI;hasOwner">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
        <rdfs:range rdf:resource="&SmartAPI;User"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useCalendar -->

    <owl:ObjectProperty rdf:about="&SmartAPI;useCalendar">
        <rdfs:domain rdf:resource="&SmartAPI;Calendar"/>
        <rdfs:range rdf:resource="&SmartAPI;CalendarMethod"/>
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useGUI -->

    <owl:ObjectProperty rdf:about="&SmartAPI;useGUI">
        <rdfs:range rdf:resource="&SmartAPI;GUIMethod"/>
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useMethod -->

    <owl:ObjectProperty rdf:about="&SmartAPI;useMethod"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useParser -->

    <owl:ObjectProperty rdf:about="&SmartAPI;useParser">
        <rdfs:domain rdf:resource="&SmartAPI;Parser"/>
        <rdfs:range rdf:resource="&SmartAPI;ParserMethod"/>
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#useStorage -->

    <owl:ObjectProperty rdf:about="&SmartAPI;useStorage">
        <rdfs:domain rdf:resource="&SmartAPI;Storage"/>
        <rdfs:range rdf:resource="&SmartAPI;StorageMethod"/>
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#usegraph -->

    <owl:ObjectProperty rdf:about="&SmartAPI;usegraph">
        <rdfs:domain rdf:resource="&SmartAPI;graph"/>
        <rdfs:range rdf:resource="&SmartAPI;graphMethod"/>
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#usenull -->

    <owl:ObjectProperty rdf:about="&SmartAPI;usenull">
        <rdfs:subPropertyOf rdf:resource="&SmartAPI;useMethod"/>
    </owl:ObjectProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Data properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasAvatar -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasAvatar">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasCategory -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasCategory">
        <rdfs:domain rdf:resource="&SmartAPI;Project"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasCode -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasCode">
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasDescription -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasDescription">
        <rdfs:domain rdf:resource="&SmartAPI;Project"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasEmail -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasEmail">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasKeyword -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasKeyword">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasName -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasName">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasPassword -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasPassword">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasScore -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasScore">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
        <rdfs:range rdf:resource="&xsd;int"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasStars -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasStars">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&xsd;int"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasSurname -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasSurname">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasUsername -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasUsername">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&xsd;string"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasVoted -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasVoted">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#hasVoters -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;hasVoters">
        <rdfs:domain rdf:resource="&SmartAPI;CodePattern"/>
        <rdfs:range rdf:resource="&xsd;int"/>
    </owl:DatatypeProperty>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#isAdministrator -->

    <owl:DatatypeProperty rdf:about="&SmartAPI;isAdministrator">
        <rdfs:domain rdf:resource="&SmartAPI;User"/>
        <rdfs:range rdf:resource="&rdfs;Literal"/>
    </owl:DatatypeProperty>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Calendar -->

    <owl:Class rdf:about="&SmartAPI;Calendar">
        <rdfs:subClassOf rdf:resource="&SmartAPI;CodePattern"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CalendarMethod -->

    <owl:Class rdf:about="&SmartAPI;CalendarMethod">
        <rdfs:subClassOf rdf:resource="&SmartAPI;Method"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern -->

    <owl:Class rdf:about="&SmartAPI;CodePattern"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GUIMethod -->

    <owl:Class rdf:about="&SmartAPI;GUIMethod">
        <rdfs:subClassOf rdf:resource="&SmartAPI;Method"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Language -->

    <owl:Class rdf:about="&SmartAPI;Language"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Library -->

    <owl:Class rdf:about="&SmartAPI;Library"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Method -->

    <owl:Class rdf:about="&SmartAPI;Method"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Parser -->

    <owl:Class rdf:about="&SmartAPI;Parser">
        <rdfs:subClassOf rdf:resource="&SmartAPI;CodePattern"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ParserMethod -->

    <owl:Class rdf:about="&SmartAPI;ParserMethod">
        <rdfs:subClassOf rdf:resource="&SmartAPI;Method"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Project -->

    <owl:Class rdf:about="&SmartAPI;Project"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Storage -->

    <owl:Class rdf:about="&SmartAPI;Storage">
        <rdfs:subClassOf rdf:resource="&SmartAPI;CodePattern"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#StorageMethod -->

    <owl:Class rdf:about="&SmartAPI;StorageMethod">
        <rdfs:subClassOf rdf:resource="&SmartAPI;Method"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#User -->

    <owl:Class rdf:about="&SmartAPI;User"/>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#graph -->

    <owl:Class rdf:about="&SmartAPI;graph">
        <rdfs:subClassOf rdf:resource="&SmartAPI;CodePattern"/>
    </owl:Class>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#graphMethod -->

    <owl:Class rdf:about="&SmartAPI;graphMethod">
        <rdfs:subClassOf rdf:resource="&SmartAPI;Method"/>
    </owl:Class>
    


    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Add -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Add">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#CodePattern_Category_getCategoryName -->

    <owl:NamedIndividual rdf:about="&SmartAPI;CodePattern_Category_getCategoryName">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Component_getParent -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Component_getParent">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_close -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Connection_close">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Connection_createStatement -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Connection_createStatement">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DefaultMutableTreeNode_add -->

    <owl:NamedIndividual rdf:about="&SmartAPI;DefaultMutableTreeNode_add">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DelAll -->

    <owl:NamedIndividual rdf:about="&SmartAPI;DelAll">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilderFactory_newDocumentBuilder -->

    <owl:NamedIndividual rdf:about="&SmartAPI;DocumentBuilderFactory_newDocumentBuilder">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#DocumentBuilder_parse -->

    <owl:NamedIndividual rdf:about="&SmartAPI;DocumentBuilder_parse">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetBetweennessCentr -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetBetweennessCentr">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetClosenessCentr -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetClosenessCentr">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetDegreeCentr -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetDegreeCentr">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetId -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetId">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetNI -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetNI">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetOutEdges -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetOutEdges">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#GetSubGraph -->

    <owl:NamedIndividual rdf:about="&SmartAPI;GetSubGraph">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#HadoopAnalyzerJR -->

    <owl:NamedIndividual rdf:about="&SmartAPI;HadoopAnalyzerJR">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasCategory>Parser</hasCategory>
        <hasDescription>This project will paint all hadoop chart		</hasDescription>
        <hasCategory>Calendar</hasCategory>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Individual_addProperty -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Individual_addProperty">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#IsEdge -->

    <owl:NamedIndividual rdf:about="&SmartAPI;IsEdge">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JDBC -->

    <owl:NamedIndividual rdf:about="&SmartAPI;JDBC">
        <rdf:type rdf:resource="&SmartAPI;Library"/>
        <hasLanguage rdf:resource="&SmartAPI;Java"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_add -->

    <owl:NamedIndividual rdf:about="&SmartAPI;JFrame_add">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setDefaultCloseOperation -->

    <owl:NamedIndividual rdf:about="&SmartAPI;JFrame_setDefaultCloseOperation">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFrame_setVisible -->

    <owl:NamedIndividual rdf:about="&SmartAPI;JFrame_setVisible">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#JFreeChart -->

    <owl:NamedIndividual rdf:about="&SmartAPI;JFreeChart">
        <rdf:type rdf:resource="&SmartAPI;Library"/>
        <hasLanguage rdf:resource="&SmartAPI;Java"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Java -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Java">
        <rdf:type rdf:resource="&SmartAPI;Language"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Jena -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Jena">
        <rdf:type rdf:resource="&SmartAPI;Library"/>
        <hasLanguage rdf:resource="&SmartAPI;Java"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Len -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Len">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Nodes -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Nodes">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#PrintInfo -->

    <owl:NamedIndividual rdf:about="&SmartAPI;PrintInfo">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Python -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Python">
        <rdf:type rdf:resource="&SmartAPI;Language"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_close -->

    <owl:NamedIndividual rdf:about="&SmartAPI;ResultSet_close">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getInt -->

    <owl:NamedIndividual rdf:about="&SmartAPI;ResultSet_getInt">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_getString -->

    <owl:NamedIndividual rdf:about="&SmartAPI;ResultSet_getString">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ResultSet_next -->

    <owl:NamedIndividual rdf:about="&SmartAPI;ResultSet_next">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPI -->

    <owl:NamedIndividual rdf:about="&SmartAPI;SmartAPI">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">2</hasVoters>
        <hasScore rdf:datatype="&xsd;int">6</hasScore>
        <hasCode>	public void model(){
		SmartAPIModel s = new SmartAPIModel();
		
		String risorsa = &quot;c2&quot;;
		String keyword = &quot;calendar&quot;;		
		
		s.addKeyword(risorsa, keyword);
		s.storeOntModel();
	}</hasCode>
        <hasKeyword>modelSmart</hasKeyword>
        <hasLibrary rdf:resource="&SmartAPI;Jena"/>
        <useStorage rdf:resource="&SmartAPI;SmartAPIModel_addKeyword"/>
        <useStorage rdf:resource="&SmartAPI;SmartAPIModel_storeOntModel"/>
        <hasOwner rdf:resource="&SmartAPI;a.verdi"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPIModel_addKeyword -->

    <owl:NamedIndividual rdf:about="&SmartAPI;SmartAPIModel_addKeyword">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPIModel_createAdmin -->

    <owl:NamedIndividual rdf:about="&SmartAPI;SmartAPIModel_createAdmin">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#SmartAPIModel_storeOntModel -->

    <owl:NamedIndividual rdf:about="&SmartAPI;SmartAPIModel_storeOntModel">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_close -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Statement_close">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#Statement_executeQuery -->

    <owl:NamedIndividual rdf:about="&SmartAPI;Statement_executeQuery">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntFltH -->

    <owl:NamedIndividual rdf:about="&SmartAPI;TIntFltH">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntPrFltH -->

    <owl:NamedIndividual rdf:about="&SmartAPI;TIntPrFltH">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#TIntV -->

    <owl:NamedIndividual rdf:about="&SmartAPI;TIntV">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#a.verdi -->

    <owl:NamedIndividual rdf:about="&SmartAPI;a.verdi">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">3</hasStars>
        <hasPassword>passworda</hasPassword>
        <isAdministrator>si</isAdministrator>
        <hasAvatar>res/8.png</hasAvatar>
        <hasName>Andrea</hasName>
        <hasUsername>a.verdi</hasUsername>
        <hasVoted>p1, cp_99, </hasVoted>
        <hasSurname>Verdi</hasSurname>
        <hasEmail>andrea.verdi@gmail.com</hasEmail>
        <followProject rdf:resource="&SmartAPI;HadoopAnalyzerJR"/>
        <followProject rdf:resource="&SmartAPI;nbaproject"/>
        <followProject rdf:resource="&SmartAPI;nextProject"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#add -->

    <owl:NamedIndividual rdf:about="&SmartAPI;add">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#amedeo -->

    <owl:NamedIndividual rdf:about="&SmartAPI;amedeo">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">2</hasStars>
        <hasVoted>p1,c1,s1,</hasVoted>
        <hasUsername>amedeo</hasUsername>
        <hasSurname>leo</hasSurname>
        <hasAvatar>res/admin-1.png</hasAvatar>
        <isAdministrator>si</isAdministrator>
        <hasPassword>amedeo</hasPassword>
        <hasEmail>amedeo.leo@gmail.com</hasEmail>
        <hasName>amedeo</hasName>
        <followProject rdf:resource="&SmartAPI;HadoopAnalyzerJR"/>
        <followProject rdf:resource="&SmartAPI;gadproject"/>
        <followProject rdf:resource="&SmartAPI;nbaproject"/>
        <followProject rdf:resource="&SmartAPI;nextProject"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#avg_dispersion -->

    <owl:NamedIndividual rdf:about="&SmartAPI;avg_dispersion">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#ciro -->

    <owl:NamedIndividual rdf:about="&SmartAPI;ciro">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">2</hasStars>
        <hasAvatar>res/7.png</hasAvatar>
        <hasPassword>cirociro</hasPassword>
        <isAdministrator>no</isAdministrator>
        <hasVoted>c2,c1,testOwl,graph_cp,test_050620150956,SmartAPI,cp_99,commonNeighbors,owl6,dispersion,pydebug,py,xml,</hasVoted>
        <hasName>ciro</hasName>
        <hasEmail>ciro@amati.com</hasEmail>
        <hasUsername>ciro</hasUsername>
        <hasSurname>amati</hasSurname>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#close -->

    <owl:NamedIndividual rdf:about="&SmartAPI;close">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#commonNeighbors -->

    <owl:NamedIndividual rdf:about="&SmartAPI;commonNeighbors">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
        <rdf:type rdf:resource="&SmartAPI;graph"/>
        <hasVoters rdf:datatype="&xsd;int">2</hasVoters>
        <hasScore rdf:datatype="&xsd;int">8</hasScore>
        <hasCode>def commonNeighbors(G1, u, h):
    a = set()
    b = set()
    for N in G1.GetNI(u).GetOutEdges():
        a.add(N)
    for N in G1.GetNI(h).GetOutEdges():
        b.add(N)
    intersect = a.intersection(b)
    nodes = snap.TIntV()
    for n in intersect:
        nodes.Add(n)
    return nodes</hasCode>
        <hasKeyword>graph</hasKeyword>
        <usegraph rdf:resource="&SmartAPI;Add"/>
        <usegraph rdf:resource="&SmartAPI;GetNI"/>
        <usegraph rdf:resource="&SmartAPI;GetOutEdges"/>
        <usegraph rdf:resource="&SmartAPI;TIntV"/>
        <usegraph rdf:resource="&SmartAPI;add"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <usegraph rdf:resource="&SmartAPI;intersection"/>
        <usegraph rdf:resource="&SmartAPI;set"/>
        <hasLibrary rdf:resource="&SmartAPI;snap"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dbConn -->

    <owl:NamedIndividual rdf:about="&SmartAPI;dbConn">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">0</hasVoters>
        <hasScore rdf:datatype="&xsd;int">0</hasScore>
        <hasCode>public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;  
   static final String DB_URL = &quot;jdbc:mysql://localhost/EMP&quot;;

   //  Database credentials
   static final String USER = &quot;username&quot;;
   static final String PASS = &quot;password&quot;;
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);

      //STEP 3: Open a connection
      System.out.println(&quot;Connecting to database...&quot;);
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println(&quot;Creating statement...&quot;);
      stmt = conn.createStatement();
      String sql;
      sql = &quot;SELECT id, first, last, age FROM Employees&quot;;
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt(&quot;id&quot;);
         int age = rs.getInt(&quot;age&quot;);
         String first = rs.getString(&quot;first&quot;);
         String last = rs.getString(&quot;last&quot;);

         //Display values
         System.out.print(&quot;ID: &quot; + id);
         System.out.print(&quot;, Age: &quot; + age);
         System.out.print(&quot;, First: &quot; + first);
         System.out.println(&quot;, Last: &quot; + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println(&quot;Goodbye!&quot;);
}//end main
}//end FirstExample</hasCode>
        <hasKeyword>db</hasKeyword>
        <useStorage rdf:resource="&SmartAPI;Connection_close"/>
        <useStorage rdf:resource="&SmartAPI;Connection_createStatement"/>
        <useStorage rdf:resource="&SmartAPI;ResultSet_close"/>
        <useStorage rdf:resource="&SmartAPI;ResultSet_getInt"/>
        <useStorage rdf:resource="&SmartAPI;ResultSet_getString"/>
        <useStorage rdf:resource="&SmartAPI;ResultSet_next"/>
        <useStorage rdf:resource="&SmartAPI;Statement_close"/>
        <useStorage rdf:resource="&SmartAPI;Statement_executeQuery"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <hasLibrary rdf:resource="&SmartAPI;sql"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#debug -->

    <owl:NamedIndividual rdf:about="&SmartAPI;debug">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersion -->

    <owl:NamedIndividual rdf:about="&SmartAPI;dispersion">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">6</hasScore>
        <hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</hasCode>
        <useStorage rdf:resource="&SmartAPI;Add"/>
        <useStorage rdf:resource="&SmartAPI;GetNI"/>
        <useStorage rdf:resource="&SmartAPI;GetOutEdges"/>
        <useStorage rdf:resource="&SmartAPI;GetSubGraph"/>
        <useStorage rdf:resource="&SmartAPI;TIntV"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#dispersionCentrality -->

    <owl:NamedIndividual rdf:about="&SmartAPI;dispersionCentrality">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#embeddedness -->

    <owl:NamedIndividual rdf:about="&SmartAPI;embeddedness">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#find -->

    <owl:NamedIndividual rdf:about="&SmartAPI;find">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#findall -->

    <owl:NamedIndividual rdf:about="&SmartAPI;findall">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#findname -->

    <owl:NamedIndividual rdf:about="&SmartAPI;findname">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">0</hasVoters>
        <hasScore rdf:datatype="&xsd;int">0</hasScore>
        <hasCode>for actor in root.findall(&apos;real_person:actor&apos;, ns):
	name = actor.find(&apos;real_person:name&apos;, ns)
	name.text
	for char in actor.findall(&apos;role:character&apos;, ns):
		print &apos; |--&gt;&apos;, char.text</hasCode>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <useStorage rdf:resource="&SmartAPI;find"/>
        <useStorage rdf:resource="&SmartAPI;findall"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#float -->

    <owl:NamedIndividual rdf:about="&SmartAPI;float">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#gadproject -->

    <owl:NamedIndividual rdf:about="&SmartAPI;gadproject">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasDescription>Gad project</hasDescription>
        <hasCategory>Storage</hasCategory>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#generateXsl -->

    <owl:NamedIndividual rdf:about="&SmartAPI;generateXsl">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#gpsproject -->

    <owl:NamedIndividual rdf:about="&SmartAPI;gpsproject">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasCategory>Storage</hasCategory>
        <hasDescription>dddnsd</hasDescription>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#graph_cp -->

    <owl:NamedIndividual rdf:about="&SmartAPI;graph_cp">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">7</hasScore>
        <hasCode># da ottimizzare

import snap
import re
from snap import *
import logging
from fileinput import filename

def fromGexfToEdge(inputFileName, outputFileName):
    inputfile = open(inputFileName)
    outputfile = open(outputFileName, &apos;w&apos;)
    
    nodi = {}
    count = 0
    for i in range(1): inputfile.next()  # skip first four lines
    for line in inputfile:
        try:
            found = re.search(&apos;&lt;node id=&quot;(.+?)&quot; &apos;, line).group(1)
            nodi[found] = count
            count += 1
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = &apos;&apos;  # apply your error handling
        try:
            found1 = re.search(&apos;source=&quot;(.+?)&quot; &apos;, line).group(1)
            found2 = re.search(&apos;target=&quot;(.+?)&quot; &apos;, line).group(1)
            string = str(nodi[found1]) + &quot; &quot; + str(nodi[found2]) + &quot;\n&quot;
            outputfile.write(string)
        except AttributeError:
            # AAA, ZZZ not found in the original string
            found = &apos;&apos;  # apply your error handling
    outputfile1 = open(outputFileName+&quot;_correspondence.txt&quot;, &apos;w&apos;)
    outputfile1.write(str(nodi))
    
    inputfile.close()
    outputfile.close()
    
def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1
    
def commonNeighbors(G1, u, h):
    a = set()
    b = set()
    for N in G1.GetNI(u).GetOutEdges():
        a.add(N)
    for N in G1.GetNI(h).GetOutEdges():
        b.add(N)
    intersect = a.intersection(b)
    nodes = snap.TIntV()
    for n in intersect:
        nodes.Add(n)
    return nodes


def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print &quot;non c&apos;e l&apos;arco tra u e h&quot;
        return

    nodes = commonNeighbors(G1, u, h)

    #print &quot;doing something&quot;

    sum = 0
    for i in nodes:
        for j in nodes:

            if i &lt; j:
                logging.debug(str(i) + &quot; &quot; + str(j) + &quot; - &quot; + str(G1.IsEdge(i, j)))
                if (not (G1.IsEdge(i, j))):
                    logging.debug(&quot;non c&apos;e l&apos;arco&quot;)
                    nodes1 = snap.TIntV()
                    for N in G1.GetNI(i).GetOutEdges():
                        nodes1.Add(N)

                    #rimuovi il nodo u e h dalla lista dei nodi
                    nodes1.DelAll(u)
                    nodes1.DelAll(h)
                    Sub1 = snap.GetSubGraph(G1, nodes1)

                    nodes2 = snap.TIntV()
                    for N in G1.GetNI(j).GetOutEdges():
                        nodes2.Add(N)

                    #rimuovi il nodo u e h dalla lista dei nodi
                    nodes2.DelAll(u)
                    nodes2.DelAll(h)
                    #Sub2 = snap.GetSubGraph(G1, nodes2)

                    flag = 0
                    for k in nodes1:
                        for l in nodes2:
                            if (k == l):
                                flag = 1

                    if (flag == 0):
                        #logging.debug(str(k) +&quot; &quot; + str(l) + &quot;......&quot;)
                        sum = sum + 1
                        logging.debug(&quot;sum: &quot; + str(sum))

    #print &quot;la dispersione tra il numero u e il nodo h e&apos;: &quot;, sum
    return float(sum)


def embeddedness(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print &quot;non c&apos;e l&apos;arco tra u e h&quot;
        return

    nodes = commonNeighbors(G1, u, h)

    #print &quot;la embeddedness e&apos;&quot;, nodes.Len()
    return nodes.Len()


def norm(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        return  #dispersion between u and h cannot be calculated

    dispers = dispersion(G1, u, h)
    emb = embeddedness(G1, u, h)
    
    if emb == 0:
        return float(0)
    normaliz = float(dispers) / float(emb)
    #print &quot;la norma e&apos; %.5f&quot; % normaliz
    return normaliz


def performance(G1, a=0.61, b=0, c=5, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print &quot;non c&apos;e l&apos;arco tra u e h&quot;
        return

    dispers = dispersion(G1, u, h)
    emb = embeddedness(G1, u, h)
    perf = ((dispers + b) ** a) / float((emb + c))
    print &quot;la performance e&apos;&quot;, perf
    return perf

    
#use new value of Xv in next iterations
def recDisp(G1, u, num_iterations):
    indGraph = inductGraph(G1, u)
    dispersionFromOthers = {}   #contains node=Xnode
    dispersionFromOthers_tmp = {}
    
    #Xi = 1 for all node i near u
    for node in indGraph.Nodes():
        dispersionFromOthers[node.GetId()] = 1   
        dispersionFromOthers_tmp[node.GetId()] = 1
        
    #start iterations
    iteration = 0
    while iteration &lt; num_iterations:
        print &quot;Iteration: &quot;, iteration + 1
        for node in indGraph.Nodes():
            Cuv = commonNeighbors(G1, u, node.GetId())
            #calculate first term of sum
            first_term = 0
            for xi in Cuv:
                first_term = first_term + dispersionFromOthers[xi]**2
            #calculate second term of sum
            second_term = 0
            for i in Cuv:
                for j in Cuv:
                    if i&lt;j:
                        if (not G1.IsEdge(i,j) and have_common_neighbors(G1, i, j, u, node.GetId()) == 0):
                            second_term = second_term + (1*dispersionFromOthers[i]*dispersionFromOthers[j])
            #calculate value Xi
            if (embeddedness(G1, u, node.GetId())): #embeddendness not 0
                dispersionFromOthers_tmp[node.GetId()] = (first_term + (2 * second_term))/embeddedness(G1, u, node.GetId())
                print node.GetId(), &quot; &quot;, dispersionFromOthers_tmp[node.GetId()]
        for node in indGraph.Nodes():
            dispersionFromOthers[node.GetId()] = dispersionFromOthers_tmp[node.GetId()] 
        iteration = iteration + 1
        
#use new value of Xv immediatly
def recDisp_immediate(G1, u, num_iterations):
    indGraph = inductGraph(G1, u)
    dispersionFromOthers = {}   #contains node=Xnode
    dispersionFromOthers_tmp = {}
    
    #Xi = 1 for all node i near u
    for node in indGraph.Nodes():
        dispersionFromOthers[node.GetId()] = 1   
        
    #start iterations
    iteration = 0
    while iteration &lt; num_iterations:
        print &quot;Iteration: &quot;, iteration + 1
        for node in indGraph.Nodes():
            Cuv = commonNeighbors(G1, u, node.GetId())
            #calculate first term of sum
            first_term = 0
            for xi in Cuv:
                first_term = first_term + dispersionFromOthers[xi]**2
            #calculate second term of sum
            second_term = 0
            for i in Cuv:
                for j in Cuv:
                    if i&lt;j:
                        if (not G1.IsEdge(i,j) and have_common_neighbors(G1, i, j, u, node.GetId()) == 0):
                            second_term = second_term + (1*dispersionFromOthers[i]*dispersionFromOthers[j])
            #calculate value Xi
            if (embeddedness(G1, u, node.GetId())): #embeddendness not 0
                dispersionFromOthers[node.GetId()] = (first_term + (2 * second_term))/embeddedness(G1, u, node.GetId())
                print node.GetId(), &quot; &quot;, dispersionFromOthers[node.GetId()]
        iteration = iteration + 1

#i and j haven&apos;t common neighbors except u and h in graph G1 
def have_common_neighbors(G1, i, j, u, h):
    nodes1 = snap.TIntV()
    for N in G1.GetNI(i).GetOutEdges():
        nodes1.Add(N)

    #rimuovi il nodo u e h dalla lista dei nodi
    nodes1.DelAll(u)
    nodes1.DelAll(h)
    Sub1 = snap.GetSubGraph(G1, nodes1)

    nodes2 = snap.TIntV()
    for N in G1.GetNI(j).GetOutEdges():
        nodes2.Add(N)

    #rimuovi il nodo u e h dalla lista dei nodi
    nodes2.DelAll(u)
    nodes2.DelAll(h)
    #Sub2 = snap.GetSubGraph(G1, nodes2)

    flag = 0
    for k in nodes1:
        for l in nodes2:
            if (k == l):
                flag = 1

    if (flag == 0):
        return 0
    return 1
                        
def printInfo(G):
    snap.PrintInfo(G, &quot;Python type PUNGraph&quot;)

def useOfDictionary():
    streetno = { &quot;1&quot; : &quot;Sachin Tendulkar&quot;,
            2 : &quot;Dravid&quot;,
            &quot;3&quot; : &quot;Sehwag&quot;,
            4 : &quot;Laxman&quot;,
            5 : &quot;Kohli&quot; }
    streetno[1] = 3
    
    for keys,values in streetno.items():
        print(keys)
        print(values)
    print streetno
    print streetno[1]
    
def printNodesInformations(G1, node):
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    
    #dispersion from others nodes
    print &quot;Report for node &quot;, node
    print &quot;1)DISPERSION&quot;
    for n in G1.Nodes():
        if n.GetId() != node:
            print &quot;dispersion of &quot;, node, &quot; from &quot;, n.GetId(), &quot; = &quot;, norm(G1, node, n.GetId())
    print &quot;2)DEGREE CENTRALITY&quot;
    print GetDegreeCentr(G1, node)
    print &quot;3)CLOSENESS CENTRALITY&quot;
    print GetClosenessCentr(G1,node)
    print &quot;4)BETWEENNESS CENTR&quot;
    print Nodes[node]

#print xml info for only one node
def printNodeInformations_XML(G1, node, fileName):
    out_file = open(fileName,&quot;w&quot;)
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    
    out_file.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;)
    #dispersion from ,others nodes
    out_file.write(&quot;&lt;node&gt;&quot;+str(node)+&quot;&lt;/node&gt;\n&quot;)
    out_file.write(&quot;&lt;degree_centrality&gt;&quot;+str(GetDegreeCentr(G1, node))+&quot;&lt;/degree_centrality&gt;\n&quot;)
    out_file.write(&quot;&lt;closeness_centrality&gt;&quot;+str(GetClosenessCentr(G1,node))+&quot;&lt;/closeness_centrality&gt;\n&quot;)
    out_file.write(&quot;&lt;betweenness_centrality&gt;&quot;+str(Nodes[node])+&quot;&lt;/betweenness_centrality&gt;\n&quot;)
    for n in G1.Nodes():
        if n.GetId() != node:
            out_file.write(&quot;&lt;dispersion from=&apos;&quot;+str(n.GetId())+&quot;&apos;&gt;&quot;+str(norm(G1, node, n.GetId()))+&quot;&lt;/dispersion&gt;\n&quot;)
    out_file.close()

#print xml info for first numNode nodes in graph
#if numNode == &quot;all&quot; print info for all nodes
def printNodesInformations_XML(G1, fileName, numNode):
    print &quot;start node information creating...&quot;
    out_file = open(fileName,&quot;w&quot;)
    xsl_file_name = fileName+&quot;.xsl&quot;
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    snap.GetBetweennessCentr(G1, Nodes, Edges, 1.0)
    #kMax = getKmax(G1)
    
    out_file.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;)
    out_file.write(&quot;&lt;?xml-stylesheet type=\&quot;text/xsl\&quot; href=\&quot;graphic_xsl.xsl\&quot;?&gt;\n&quot;)
    out_file.write(&quot;&lt;nodes&gt;\n&quot;)
    i=0
    #all info for each nodes
    for node in G1.Nodes():
        if numNode != &quot;all&quot;:
            if i &gt;= numNode:
                out_file.write(&quot;&lt;/nodes&gt;\n&quot;)
                return
            i = i+1
        print &quot;info for node: &quot; + str(node.GetId())
        out_file.write(&quot;\t&lt;node id=&apos;&quot;+str(node.GetId())+&quot;&apos;&gt;\n&quot;)
        out_file.write(&quot;\t\t&lt;degree_centrality&gt;&quot;+str(GetDegreeCentr(G1, node.GetId()))+&quot;&lt;/degree_centrality&gt;\n&quot;)
        out_file.write(&quot;\t\t&lt;closeness_centrality&gt;&quot;+str(GetClosenessCentr(G1,node.GetId()))+&quot;&lt;/closeness_centrality&gt;\n&quot;)
        out_file.write(&quot;\t\t&lt;betweenness_centrality&gt;&quot;+str(Nodes[node.GetId()])+&quot;&lt;/betweenness_centrality&gt;\n&quot;)
        #for n in G1.Nodes():
        #    if n.GetId() != node.getId():
        #        dispersion = norm(G1, node.GetId(), n.GetId())
        #        if dispersion != None:
        #           out_file.write(&quot;\t\t&lt;dispersion from=&apos;&quot;+str(n.GetId())+&quot;&apos;&gt;&quot;+str(norm(G1, node.GetId(), n.GetId()))+&quot;&lt;/dispersion&gt;\n&quot;)
        out_file.write(&quot;\t\t&lt;dispersion_centrality&gt;&quot;+str(dispersionCentrality(G1, node.GetId()))+&quot;&lt;/dispersion_centrality&gt;\n&quot;)
        #out_file.write(&quot;\t\t&lt;normalized_dispersion_centrality&gt;&quot;+str(normalizedDispersionCentrality(G1, node.GetId(),kMax))+&quot;&lt;/normalized_dispersion_centrality&gt;\n&quot;)
        out_file.write(&quot;\t\t&lt;dispersion_average&gt;&quot;+str(avg_dispersion(G1, node.GetId()))+&quot;&lt;/dispersion_average&gt;\n&quot;) 
        out_file.write(&quot;\t\t&lt;dispersion_max&gt;&quot;+str(max_dispersion(G1, node.GetId()))+&quot;&lt;/dispersion_max&gt;\n&quot;) 
        out_file.write(&quot;\t\t&lt;dispersion_min&gt;&quot;+str(min_dispersion(G1, node.GetId()))+&quot;&lt;/dispersion_min&gt;\n&quot;) 
        out_file.write(&quot;\t&lt;/node&gt;\n&quot;)
    out_file.write(&quot;&lt;/nodes&gt;\n&quot;)
    out_file.close()
    
    #generation of xsl to show result in browser
    generateXsl(xsl_file_name)

#for an input node calculate its dispersion from others node
#in G1 and normalize it between 0 and 1;
#then calculate mediumn between all dispersion
#kMax is max
def dispersionCentrality(G1, u):
    number = 0
    dispersionCentrality = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                dispersionCentrality = dispersionCentrality + (float(disp))#/float(divisor))
    
    return dispersionCentrality
    
#reutrn number of biggest neighbors in graph
#checking between each pairs of nodes
def getKmax(G1):
    kMax = 0
    for node1 in G1.Nodes():
        for node2 in G1.Nodes():
            if node2.GetId() &gt; node1.GetId():
                newK = commonNeighbors(G1, node1.GetId(), node2.GetId()).Len()
                if newK &gt; kMax:
                    kMax = newK
    return kMax


#for an input node calculate its dispersion from others node
#in G1 and normalize it between 0 and 1;
#then calculate mediumn between all dispersion
#kMax is max
def normalizedDispersionCentrality(G1, u, kMax):
    number = 0
    dispersionCentrality = 0
    divisor = 2**int(kMax)   #normalization coefficient
    
    sumOfDispersion = 0.0
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = norm(G1, u, n.GetId())
            if disp != None:
                sumOfDispersion = sumOfDispersion + (disp/float(divisor))
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                dispersionCentrality = dispersionCentrality + (float(disp))/float(divisor)
    
    return dispersionCentrality


#return the average of all u&apos;s dispersions
#from others node in G1
def avg_dispersion(G1, u):
    number = 0
    sum_dispersion = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            disp = dispersion(G1, u, n.GetId())
            if disp != None:
                number = number + 1
                sum_dispersion = sum_dispersion + disp
    
    if number != 0:
        return sum_dispersion / number
    return sum_dispersion

def min_dispersion(G1, u):
    min = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            isMin = dispersion(G1,u,n.GetId())
            if (isMin != None and isMin&lt;min):
                min = isMin

    return min

def max_dispersion(G1, u):
    max = 0
    
    for n in G1.Nodes():
        if n.GetId() != u:
            isMax = dispersion(G1,u,n.GetId())
            if (isMax != None and isMax&gt;max):
                max = isMax

    return max

def generateXsl(xslFileName):
    print &quot;Xsl Not implemented yet&quot;
    
#from xml generated to csv for gephi
def printNodesInformations_CSV(G1, fileName, numNode):
    print &quot;start node information creating...&quot;
    out_file = open(fileName,&quot;w&quot;)
    
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    print &quot;calculating BetweennessCentr...&quot;
    snap.GetBetweennessCentr(G1, Nodes, Edges, 0.99)
    #kMax = getKmax(G1)
    
    out_file.write(&quot;id,closeness_centrality,betweenness_centrality,dispersion_centrality\n&quot;)
    i=0
    #all info for each nodes
    for node in G1.Nodes():
        if numNode != &quot;all&quot;:
            if i &gt;= numNode:
                return
            i = i+1
        print &quot;info for node: &quot; + str(node.GetId())
        out_file.write(str(node.GetId())+&quot;,&quot;)
        #out_file.write(str(GetDegreeCentr(G1, node.GetId()))+&quot;,&quot;)
        out_file.write(str(GetClosenessCentr(G1,node.GetId()))+&quot;,&quot;)
        out_file.write(str(Nodes[node.GetId()])+&quot;,&quot;)    #betweenness_centrality
        #print &quot;betweenness ok...&quot;;
        out_file.write(str(dispersionCentrality(G1, node.GetId()))+&quot;\n&quot;)
        #out_file.write(str(avg_dispersion(G1, node.GetId()))+&quot;,&quot;) 
        #out_file.write(str(max_dispersion(G1, node.GetId()))+&quot;,&quot;) 
        #out_file.write(str(min_dispersion(G1, node.GetId()))+&quot;\n&quot;) 
    out_file.close()    
    #generation of xsl to show result in browser
    #generateXsl(xsl_file_name)
    
def compare_betweenness_centrality(G1, fileName):
    print &quot;start betweenness comparison creating...&quot;
    out_file = open(fileName,&quot;w&quot;)
    Nodes = snap.TIntFltH()
    Edges = snap.TIntPrFltH()
    out_file.write(&quot;id,betweenness_centrality,approx\n&quot;)
    approx = float(1)
    for approx in range(1,10):
        snap.GetBetweennessCentr(G1, Nodes, Edges, float(approx)/10)
        print &quot;creating info for approx = &quot; + str(float(approx)/10)
        for node in G1.Nodes():
            out_file.write(str(node.GetId())+&quot;,&quot;)
            out_file.write(str(Nodes[node.GetId()])+&quot;,&quot;)
            out_file.write(str(float(approx)/10)+&quot;\n&quot;)
        approx = approx + 0.1
    out_file.close()

def printAllNodes(G1):
     for node in G1.Nodes():
        print &quot;info for node: &quot; + str(node.GetId())

</hasCode>
        <useStorage rdf:resource="&SmartAPI;Add"/>
        <useStorage rdf:resource="&SmartAPI;DelAll"/>
        <useStorage rdf:resource="&SmartAPI;GetBetweennessCentr"/>
        <useStorage rdf:resource="&SmartAPI;GetClosenessCentr"/>
        <useStorage rdf:resource="&SmartAPI;GetDegreeCentr"/>
        <useStorage rdf:resource="&SmartAPI;GetId"/>
        <useStorage rdf:resource="&SmartAPI;GetNI"/>
        <useStorage rdf:resource="&SmartAPI;GetOutEdges"/>
        <useStorage rdf:resource="&SmartAPI;GetSubGraph"/>
        <useStorage rdf:resource="&SmartAPI;IsEdge"/>
        <useStorage rdf:resource="&SmartAPI;Len"/>
        <useStorage rdf:resource="&SmartAPI;Nodes"/>
        <useStorage rdf:resource="&SmartAPI;PrintInfo"/>
        <useStorage rdf:resource="&SmartAPI;TIntFltH"/>
        <useStorage rdf:resource="&SmartAPI;TIntPrFltH"/>
        <useStorage rdf:resource="&SmartAPI;TIntV"/>
        <useStorage rdf:resource="&SmartAPI;add"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <useStorage rdf:resource="&SmartAPI;avg_dispersion"/>
        <useStorage rdf:resource="&SmartAPI;close"/>
        <useStorage rdf:resource="&SmartAPI;commonNeighbors"/>
        <useStorage rdf:resource="&SmartAPI;debug"/>
        <useStorage rdf:resource="&SmartAPI;dispersion"/>
        <useStorage rdf:resource="&SmartAPI;dispersionCentrality"/>
        <useStorage rdf:resource="&SmartAPI;embeddedness"/>
        <useStorage rdf:resource="&SmartAPI;float"/>
        <useStorage rdf:resource="&SmartAPI;generateXsl"/>
        <useStorage rdf:resource="&SmartAPI;group"/>
        <useStorage rdf:resource="&SmartAPI;have_common_neighbors"/>
        <useStorage rdf:resource="&SmartAPI;inductGraph"/>
        <useStorage rdf:resource="&SmartAPI;int"/>
        <useStorage rdf:resource="&SmartAPI;intersection"/>
        <useStorage rdf:resource="&SmartAPI;items"/>
        <useStorage rdf:resource="&SmartAPI;max_dispersion"/>
        <useStorage rdf:resource="&SmartAPI;min_dispersion"/>
        <useStorage rdf:resource="&SmartAPI;next"/>
        <useStorage rdf:resource="&SmartAPI;norm"/>
        <useStorage rdf:resource="&SmartAPI;open"/>
        <useStorage rdf:resource="&SmartAPI;range"/>
        <useStorage rdf:resource="&SmartAPI;search"/>
        <useStorage rdf:resource="&SmartAPI;set"/>
        <hasLibrary rdf:resource="&SmartAPI;snap"/>
        <useStorage rdf:resource="&SmartAPI;str"/>
        <useStorage rdf:resource="&SmartAPI;type"/>
        <useStorage rdf:resource="&SmartAPI;write"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#group -->

    <owl:NamedIndividual rdf:about="&SmartAPI;group">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#have_common_neighbors -->

    <owl:NamedIndividual rdf:about="&SmartAPI;have_common_neighbors">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#inductGraph -->

    <owl:NamedIndividual rdf:about="&SmartAPI;inductGraph">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#int -->

    <owl:NamedIndividual rdf:about="&SmartAPI;int">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#intersection -->

    <owl:NamedIndividual rdf:about="&SmartAPI;intersection">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#iolrin -->

    <owl:NamedIndividual rdf:about="&SmartAPI;iolrin">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">0</hasStars>
        <hasPassword>password</hasPassword>
        <hasUsername>iolrin</hasUsername>
        <hasSurname>Rinaldi</hasSurname>
        <hasVoted>SmartAPI, jeditpane,test_050620150956,jeditpane,cp_99,p1,commonNeighbors,</hasVoted>
        <hasAvatar>res/6.png</hasAvatar>
        <isAdministrator>no</isAdministrator>
        <hasName>Iolanda</hasName>
        <hasEmail>iole.rinaldi@gmail.com</hasEmail>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#items -->

    <owl:NamedIndividual rdf:about="&SmartAPI;items">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#max_dispersion -->

    <owl:NamedIndividual rdf:about="&SmartAPI;max_dispersion">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#min_dispersion -->

    <owl:NamedIndividual rdf:about="&SmartAPI;min_dispersion">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#nbaproject -->

    <owl:NamedIndividual rdf:about="&SmartAPI;nbaproject">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasDescription>project about nba</hasDescription>
        <hasCategory>Storage</hasCategory>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#next -->

    <owl:NamedIndividual rdf:about="&SmartAPI;next">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#nextProject -->

    <owl:NamedIndividual rdf:about="&SmartAPI;nextProject">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasDescription>this is nextproj</hasDescription>
        <hasCategory>Calendar</hasCategory>
        <hasCategory>Storage</hasCategory>
        <hasCategory>Parser</hasCategory>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#norm -->

    <owl:NamedIndividual rdf:about="&SmartAPI;norm">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#open -->

    <owl:NamedIndividual rdf:about="&SmartAPI;open">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#owl6 -->

    <owl:NamedIndividual rdf:about="&SmartAPI;owl6">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">4</hasScore>
        <hasKeyword>ontology</hasKeyword>
        <hasCode>public void setCodePattern_s(ArrayList&lt;CodePattern_Category&gt; cp_s, String rootName, boolean inferred){
		this.cp_s = cp_s;
		DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(rootName);
		for (CodePattern_Category tmp:cp_s){
			if(inferred){
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getInferredCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getInferredCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
			else{	//all basic cp
				DefaultMutableTreeNode categoryNode = new DefaultMutableTreeNode(tmp.getCategoryName());
				for (int i=0; i&lt;tmp.getBasicCodePattern().size(); i++){
					DefaultMutableTreeNode cp_instance = new DefaultMutableTreeNode(tmp.getBasicCodePattern().get(i).getResource().getLocalName());
					categoryNode.add(cp_instance);
				}
				rootNode.add(categoryNode);
			}
		}
		if (tree != null){
			this.remove(tree);
		}
		tree = new JTree(rootNode);
		if( scroll == null){
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		else{
			this.remove(scroll);
			scroll = new JScrollPane(tree);
			add(scroll);
		}
		tree.addMouseListener(new MouseAdapter() {
		      public void mouseClicked(MouseEvent me) {
		    	  TreePath tp = tree.getPathForLocation(me.getX(), me.getY());
		    	    if (tp != null){
		    	    	for(TreePathListener t:treePathListener){
		    	    		t.treePathChanged(tp);
		    	    	}		    	      
		    	    }
		      }
	    });
	} </hasCode>
        <useStorage rdf:resource="&SmartAPI;CodePattern_Category_getCategoryName"/>
        <useStorage rdf:resource="&SmartAPI;DefaultMutableTreeNode_add"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#py -->

    <owl:NamedIndividual rdf:about="&SmartAPI;py">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">5</hasScore>
        <hasCode>for actor in root.findall(&apos;real_person:actor&apos;, ns):
	name = actor.find(&apos;real_person:name&apos;, ns)
	name.text
	for char in actor.findall(&apos;role:character&apos;, ns):
		print &apos; |--&gt;&apos;, char.text</hasCode>
        <hasCode>for actor in root.findall(&apos;real_person:actor&apos;, ns):
	name = actor.find(&apos;real_person:name&apos;, ns)
	name.text
	for char in actor.findall(&apos;role:character&apos;, ns):
	print &apos; |--&gt;&apos;, char.text</hasCode>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <useStorage rdf:resource="&SmartAPI;find"/>
        <useStorage rdf:resource="&SmartAPI;findall"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pySnap -->

    <owl:NamedIndividual rdf:about="&SmartAPI;pySnap">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">0</hasVoters>
        <hasScore rdf:datatype="&xsd;int">0</hasScore>
        <hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</hasCode>
        <useStorage rdf:resource="&SmartAPI;Add"/>
        <useStorage rdf:resource="&SmartAPI;GetNI"/>
        <useStorage rdf:resource="&SmartAPI;GetOutEdges"/>
        <useStorage rdf:resource="&SmartAPI;GetSubGraph"/>
        <useStorage rdf:resource="&SmartAPI;TIntV"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#pydebug -->

    <owl:NamedIndividual rdf:about="&SmartAPI;pydebug">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">4</hasScore>
        <hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print&apos;ppp&apos;
        return</hasCode>
        <hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
    	#
        #print&apos;ppp&apos;
        print &quot;ciao&quot;
        return</hasCode>
        <hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print
        return</hasCode>
        <hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
    	#&quot;&quot;
        #print&apos;ppp&apos;
        print &quot;ciao&quot;
        return</hasCode>
        <hasCode>def dispersion(G1, u=8, h=9):
    #logging.basicConfig(level=logging.DEBUG)

    logging.debug(str(type(u)) + str(type(h)))
    if (not (G1.IsEdge(u, h))):
        #print&apos;ppp&apos;
        print &quot;ciao&quot;
        return</hasCode>
        <useStorage rdf:resource="&SmartAPI;IsEdge"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <useStorage rdf:resource="&SmartAPI;debug"/>
        <hasLibrary rdf:resource="&SmartAPI;snap"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#range -->

    <owl:NamedIndividual rdf:about="&SmartAPI;range">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#s.cardamone -->

    <owl:NamedIndividual rdf:about="&SmartAPI;s.cardamone">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">0</hasStars>
        <isAdministrator>no</isAdministrator>
        <hasSurname>Cardamone</hasSurname>
        <hasEmail>s.cardamone@gmail.com</hasEmail>
        <hasUsername>s.cardamone</hasUsername>
        <hasVoted>0</hasVoted>
        <hasPassword>123456</hasPassword>
        <hasName>Stefania</hasName>
        <hasAvatar>res/3.png</hasAvatar>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#search -->

    <owl:NamedIndividual rdf:about="&SmartAPI;search">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#securityProject -->

    <owl:NamedIndividual rdf:about="&SmartAPI;securityProject">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasCategory>Storage</hasCategory>
        <hasDescription>security Project</hasDescription>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#set -->

    <owl:NamedIndividual rdf:about="&SmartAPI;set">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#simone -->

    <owl:NamedIndividual rdf:about="&SmartAPI;simone">
        <rdf:type rdf:resource="&SmartAPI;User"/>
        <hasStars rdf:datatype="&xsd;int">0</hasStars>
        <isAdministrator>si</isAdministrator>
        <hasAvatar>res/2.png</hasAvatar>
        <hasEmail>simoneromano@gmail.com</hasEmail>
        <hasSurname>romano</hasSurname>
        <hasUsername>simone</hasUsername>
        <hasPassword>simone</hasPassword>
        <hasVoted>c2,c1,</hasVoted>
        <hasName>simone</hasName>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#smartapi3 -->

    <owl:NamedIndividual rdf:about="&SmartAPI;smartapi3">
        <rdf:type rdf:resource="&SmartAPI;Project"/>
        <hasCategory>Storage</hasCategory>
        <hasCategory>Calendar</hasCategory>
        <hasDescription>here description</hasDescription>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#snap -->

    <owl:NamedIndividual rdf:about="&SmartAPI;snap">
        <rdf:type rdf:resource="&SmartAPI;Library"/>
        <hasLanguage rdf:resource="&SmartAPI;Python"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#sql -->

    <owl:NamedIndividual rdf:about="&SmartAPI;sql">
        <rdf:type rdf:resource="&SmartAPI;Library"/>
        <hasLanguage rdf:resource="&SmartAPI;Java"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#str -->

    <owl:NamedIndividual rdf:about="&SmartAPI;str">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#subgraph -->

    <owl:NamedIndividual rdf:about="&SmartAPI;subgraph">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">0</hasVoters>
        <hasScore rdf:datatype="&xsd;int">0</hasScore>
        <hasCode>def inductGraph(G1, u):
    #crea il grafo indotto (vicinato) di u
    nodes = snap.TIntV()

    for N in G1.GetNI(u).GetOutEdges():
        nodes.Add(N)
    SubGraph1 = snap.GetSubGraph(G1, nodes)
    return SubGraph1</hasCode>
        <useStorage rdf:resource="&SmartAPI;Add"/>
        <useStorage rdf:resource="&SmartAPI;GetNI"/>
        <useStorage rdf:resource="&SmartAPI;GetOutEdges"/>
        <useStorage rdf:resource="&SmartAPI;GetSubGraph"/>
        <useStorage rdf:resource="&SmartAPI;TIntV"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#testOwl -->

    <owl:NamedIndividual rdf:about="&SmartAPI;testOwl">
        <rdf:type rdf:resource="&SmartAPI;Storage"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">4</hasScore>
        <hasKeyword>ontology</hasKeyword>
        <hasCode> public void treePathChanged(TreePath t) {
		log.info(&quot;updating gui...&quot;);
		SwingUtilities.updateComponentTreeUI(this);
		Component c = getParent();
		while (c!=null){
			SwingUtilities.updateComponentTreeUI(this);
			c = c.getParent();
		}
	}</hasCode>
        <useStorage rdf:resource="&SmartAPI;Component_getParent"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#type -->

    <owl:NamedIndividual rdf:about="&SmartAPI;type">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#write -->

    <owl:NamedIndividual rdf:about="&SmartAPI;write">
        <rdf:type rdf:resource="&SmartAPI;Method"/>
    </owl:NamedIndividual>
    


    <!-- http://www.semanticweb.org/simone/ontologies/2015/4/SmartAPI#xml -->

    <owl:NamedIndividual rdf:about="&SmartAPI;xml">
        <rdf:type rdf:resource="&SmartAPI;Parser"/>
        <hasVoters rdf:datatype="&xsd;int">1</hasVoters>
        <hasScore rdf:datatype="&xsd;int">6</hasScore>
        <hasCode>public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = &quot;com.mysql.jdbc.Driver&quot;;  
   static final String DB_URL = &quot;jdbc:mysql://localhost/EMP&quot;;

   //  Database credentials
   static final String USER = &quot;username&quot;;
   static final String PASS = &quot;password&quot;;
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);

      //STEP 3: Open a connection
      System.out.println(&quot;Connecting to database...&quot;);
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println(&quot;Creating statement...&quot;);
      stmt = conn.createStatement();
      String sql;
      sql = &quot;SELECT id, first, last, age FROM Employees&quot;;
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt(&quot;id&quot;);
         int age = rs.getInt(&quot;age&quot;);
         String first = rs.getString(&quot;first&quot;);
         String last = rs.getString(&quot;last&quot;);

         //Display values
         System.out.print(&quot;ID: &quot; + id);
         System.out.print(&quot;, Age: &quot; + age);
         System.out.print(&quot;, First: &quot; + first);
         System.out.println(&quot;, Last: &quot; + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println(&quot;Goodbye!&quot;);


   DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		try {
			//Using factory get an instance of document builder
			DocumentBuilder db = dbf.newDocumentBuilder();
			//parse using builder to get DOM representation of the XML file
			dom = db.parse(&quot;employees.xml&quot;);
		}catch(ParserConfigurationException pce) {
			pce.printStackTrace();
		}catch(SAXException se) {
			se.printStackTrace();
		}catch(IOException ioe) {
			ioe.printStackTrace();
		}
}//end main
}//end FirstExample</hasCode>
        <hasKeyword>parser</hasKeyword>
        <useParser rdf:resource="&SmartAPI;Connection_close"/>
        <useParser rdf:resource="&SmartAPI;Connection_createStatement"/>
        <useParser rdf:resource="&SmartAPI;DocumentBuilderFactory_newDocumentBuilder"/>
        <useParser rdf:resource="&SmartAPI;DocumentBuilder_parse"/>
        <hasLanguage rdf:resource="&SmartAPI;Java"/>
        <useParser rdf:resource="&SmartAPI;ResultSet_close"/>
        <useParser rdf:resource="&SmartAPI;ResultSet_getInt"/>
        <useParser rdf:resource="&SmartAPI;ResultSet_getString"/>
        <useParser rdf:resource="&SmartAPI;ResultSet_next"/>
        <useParser rdf:resource="&SmartAPI;Statement_close"/>
        <useParser rdf:resource="&SmartAPI;Statement_executeQuery"/>
        <hasOwner rdf:resource="&SmartAPI;amedeo"/>
        <hasLibrary rdf:resource="&SmartAPI;xml"/>
    </owl:NamedIndividual>
</rdf:RDF>



<!-- Generated by the OWL API (version 3.5.1) http://owlapi.sourceforge.net -->

